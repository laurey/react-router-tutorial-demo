import React, {Component} from 'react';
import {Spin} from 'antd';

let defaultLoadingComponent = () => <Spin spinning><div>Loading...</div></Spin>;

function withDynamicComponent(config) {
    const {resolve} = config;

    return class DynamicComponent extends Component {
        constructor(...args) {
            super(...args);
            this.LoadingComponent = config.Loading || config.LoadingComponent || defaultLoadingComponent;
            this.state = {
                AsyncComponent: null
            };
            this.load();
        }

        componentDidMount() {
            this.mounted = true;
        }

        componentWillUnmount() {
            this.mounted = false;
        }

        load() {
            resolve().then(m => {
                const AsyncComponent = m.default || m;
                if (this.mounted) {
                    this.setState({AsyncComponent});
                }
                else {
                    // eslint-disable-next-line react/no-direct-mutation-state
                    this.state.AsyncComponent = AsyncComponent;
                }
            });
        }

        render() {
            const {AsyncComponent} = this.state;
            const {LoadingComponent} = this;
            if (AsyncComponent) {
                return <AsyncComponent {...this.props} />;
            }

            return <LoadingComponent {...this.props} />;
        }
    };
}

function dynamic(config) {
    const {component: resolveComponent} = config;
    return withDynamicComponent({
        resolve: config.resolve || function () {
            const models = [];
            const component = resolveComponent();
            return new Promise(resolve => {
                Promise.all([component]).then(ret => {
                    if (!models || !models.length) {
                        return resolve(ret[0]);
                    }
                });
            });
        },
        ...config
    });
}

dynamic.setDefaultLoadingComponent = LoadingComponent => {
    defaultLoadingComponent = LoadingComponent;
};

export default dynamic;
